"""Add correction fields to ClassificationResult

Revision ID: 43eacc7c9206
Revises: 
Create Date: 2025-09-09 23:28:52.187079

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '43eacc7c9206'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('classification_results', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_corrected', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('corrected_prediction', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('corrected_by', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('corrected_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('probability_radikal',
               existing_type=sa.NUMERIC(precision=10, scale=8),
               type_=sa.Float(),
               existing_nullable=False,
               existing_server_default=sa.text('0.0'))
        batch_op.alter_column('probability_non_radikal',
               existing_type=sa.NUMERIC(precision=10, scale=8),
               type_=sa.Float(),
               existing_nullable=False,
               existing_server_default=sa.text('0.0'))
        batch_op.drop_index(batch_op.f('idx_classification_results_classified_by'))
        batch_op.drop_index(batch_op.f('idx_classification_results_created_at'))
        batch_op.drop_index(batch_op.f('idx_classification_results_data_id'))
        batch_op.drop_index(batch_op.f('idx_classification_results_data_type'))
        batch_op.drop_index(batch_op.f('idx_classification_results_data_type_id'))
        batch_op.drop_index(batch_op.f('idx_classification_results_model_name'))
        batch_op.drop_index(batch_op.f('idx_classification_results_prediction'))
        batch_op.drop_constraint(batch_op.f('classification_results_classified_by_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['classified_by'], ['id'])
        batch_op.create_foreign_key(None, 'users', ['corrected_by'], ['id'])

    with op.batch_alter_table('clean_data_scraper', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_clean_data_scraper_cleaned_by'))
        batch_op.drop_index(batch_op.f('idx_clean_data_scraper_content_fts'), postgresql_using='gin')
        batch_op.drop_index(batch_op.f('idx_clean_data_scraper_created_at'))
        batch_op.drop_index(batch_op.f('idx_clean_data_scraper_keyword'))
        batch_op.drop_index(batch_op.f('idx_clean_data_scraper_platform'))
        batch_op.drop_index(batch_op.f('idx_clean_data_scraper_raw_data_scraper_id'))
        batch_op.drop_constraint(batch_op.f('clean_data_scraper_raw_data_scraper_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('clean_data_scraper_cleaned_by_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'raw_data_scraper', ['raw_data_scraper_id'], ['id'])
        batch_op.create_foreign_key(None, 'users', ['cleaned_by'], ['id'])

    with op.batch_alter_table('clean_data_upload', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_clean_data_upload_cleaned_by'))
        batch_op.drop_index(batch_op.f('idx_clean_data_upload_content_fts'), postgresql_using='gin')
        batch_op.drop_index(batch_op.f('idx_clean_data_upload_created_at'))
        batch_op.drop_index(batch_op.f('idx_clean_data_upload_dataset_id'))
        batch_op.drop_index(batch_op.f('idx_clean_data_upload_platform'))
        batch_op.drop_index(batch_op.f('idx_clean_data_upload_raw_data_id'))
        batch_op.drop_constraint(batch_op.f('clean_data_upload_cleaned_by_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('clean_data_upload_raw_data_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'raw_data', ['raw_data_id'], ['id'])
        batch_op.create_foreign_key(None, 'users', ['cleaned_by'], ['id'])

    with op.batch_alter_table('datasets', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_datasets_name'))
        batch_op.drop_index(batch_op.f('idx_datasets_uploaded_by'))

    with op.batch_alter_table('raw_data', schema=None) as batch_op:
        batch_op.alter_column('file_size',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='File size in bytes for uploaded files',
               existing_nullable=True)
        batch_op.drop_index(batch_op.f('idx_raw_data_created_at'))
        batch_op.drop_index(batch_op.f('idx_raw_data_dataset_id'))
        batch_op.drop_index(batch_op.f('idx_raw_data_dataset_name'))
        batch_op.drop_index(batch_op.f('idx_raw_data_file_size'), postgresql_where='(file_size IS NOT NULL)')
        batch_op.drop_index(batch_op.f('idx_raw_data_platform'))
        batch_op.drop_index(batch_op.f('idx_raw_data_status'))
        batch_op.drop_index(batch_op.f('idx_raw_data_uploaded_by'))
        batch_op.drop_constraint(batch_op.f('raw_data_dataset_id_fkey'), type_='foreignkey')
        batch_op.drop_constraint(batch_op.f('raw_data_uploaded_by_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['uploaded_by'], ['id'])
        batch_op.create_foreign_key(None, 'datasets', ['dataset_id'], ['id'])

    with op.batch_alter_table('raw_data_scraper', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_raw_data_scraper_created_at'))
        batch_op.drop_index(batch_op.f('idx_raw_data_scraper_platform'))
        batch_op.drop_index(batch_op.f('idx_raw_data_scraper_scraped_by'))
        batch_op.drop_index(batch_op.f('idx_raw_data_scraper_status'))
        batch_op.drop_constraint(batch_op.f('raw_data_scraper_scraped_by_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'users', ['scraped_by'], ['id'])

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('full_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'user'::character varying"))
        batch_op.drop_index(batch_op.f('idx_users_created_at'))
        batch_op.drop_index(batch_op.f('idx_users_email'))
        batch_op.drop_index(batch_op.f('idx_users_is_active'))
        batch_op.drop_index(batch_op.f('idx_users_role'))
        batch_op.drop_index(batch_op.f('idx_users_username'))
        batch_op.drop_column('timezone')
        batch_op.drop_column('email_notifications')
        batch_op.drop_column('language_preference')
        batch_op.drop_column('profile_picture')
        batch_op.drop_column('phone_number')
        batch_op.drop_column('theme_preference')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('theme_preference', sa.VARCHAR(length=20), server_default=sa.text("'dark'::character varying"), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('profile_picture', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('language_preference', sa.VARCHAR(length=10), server_default=sa.text("'id'::character varying"), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('email_notifications', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('timezone', sa.VARCHAR(length=50), server_default=sa.text("'Asia/Jakarta'::character varying"), autoincrement=False, nullable=True))
        batch_op.create_index(batch_op.f('idx_users_username'), ['username'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_role'), ['role'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_email'), ['email'], unique=False)
        batch_op.create_index(batch_op.f('idx_users_created_at'), ['created_at'], unique=False)
        batch_op.alter_column('role',
               existing_type=sa.VARCHAR(length=20),
               nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
        batch_op.alter_column('full_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)

    with op.batch_alter_table('raw_data_scraper', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('raw_data_scraper_scraped_by_fkey'), 'users', ['scraped_by'], ['id'], ondelete='CASCADE')
        batch_op.create_index(batch_op.f('idx_raw_data_scraper_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_raw_data_scraper_scraped_by'), ['scraped_by'], unique=False)
        batch_op.create_index(batch_op.f('idx_raw_data_scraper_platform'), ['platform'], unique=False)
        batch_op.create_index(batch_op.f('idx_raw_data_scraper_created_at'), ['created_at'], unique=False)

    with op.batch_alter_table('raw_data', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('raw_data_uploaded_by_fkey'), 'users', ['uploaded_by'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(batch_op.f('raw_data_dataset_id_fkey'), 'datasets', ['dataset_id'], ['id'], ondelete='SET NULL')
        batch_op.create_index(batch_op.f('idx_raw_data_uploaded_by'), ['uploaded_by'], unique=False)
        batch_op.create_index(batch_op.f('idx_raw_data_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('idx_raw_data_platform'), ['platform'], unique=False)
        batch_op.create_index(batch_op.f('idx_raw_data_file_size'), ['file_size'], unique=False, postgresql_where='(file_size IS NOT NULL)')
        batch_op.create_index(batch_op.f('idx_raw_data_dataset_name'), ['dataset_name'], unique=False)
        batch_op.create_index(batch_op.f('idx_raw_data_dataset_id'), ['dataset_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_raw_data_created_at'), ['created_at'], unique=False)
        batch_op.alter_column('file_size',
               existing_type=sa.BIGINT(),
               comment='File size in bytes for uploaded files',
               existing_nullable=True)

    with op.batch_alter_table('datasets', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_datasets_uploaded_by'), ['uploaded_by'], unique=False)
        batch_op.create_index(batch_op.f('idx_datasets_name'), ['name'], unique=False)

    with op.batch_alter_table('clean_data_upload', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('clean_data_upload_raw_data_id_fkey'), 'raw_data', ['raw_data_id'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(batch_op.f('clean_data_upload_cleaned_by_fkey'), 'users', ['cleaned_by'], ['id'], ondelete='CASCADE')
        batch_op.create_index(batch_op.f('idx_clean_data_upload_raw_data_id'), ['raw_data_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_clean_data_upload_platform'), ['platform'], unique=False)
        batch_op.create_index(batch_op.f('idx_clean_data_upload_dataset_id'), ['dataset_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_clean_data_upload_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_clean_data_upload_content_fts'), [sa.literal_column("to_tsvector('indonesian'::regconfig, content)")], unique=False, postgresql_using='gin')
        batch_op.create_index(batch_op.f('idx_clean_data_upload_cleaned_by'), ['cleaned_by'], unique=False)

    with op.batch_alter_table('clean_data_scraper', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('clean_data_scraper_cleaned_by_fkey'), 'users', ['cleaned_by'], ['id'], ondelete='CASCADE')
        batch_op.create_foreign_key(batch_op.f('clean_data_scraper_raw_data_scraper_id_fkey'), 'raw_data_scraper', ['raw_data_scraper_id'], ['id'], ondelete='CASCADE')
        batch_op.create_index(batch_op.f('idx_clean_data_scraper_raw_data_scraper_id'), ['raw_data_scraper_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_clean_data_scraper_platform'), ['platform'], unique=False)
        batch_op.create_index(batch_op.f('idx_clean_data_scraper_keyword'), ['keyword'], unique=False)
        batch_op.create_index(batch_op.f('idx_clean_data_scraper_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_clean_data_scraper_content_fts'), [sa.literal_column("to_tsvector('indonesian'::regconfig, content)")], unique=False, postgresql_using='gin')
        batch_op.create_index(batch_op.f('idx_clean_data_scraper_cleaned_by'), ['cleaned_by'], unique=False)

    with op.batch_alter_table('classification_results', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('classification_results_classified_by_fkey'), 'users', ['classified_by'], ['id'], ondelete='CASCADE')
        batch_op.create_index(batch_op.f('idx_classification_results_prediction'), ['prediction'], unique=False)
        batch_op.create_index(batch_op.f('idx_classification_results_model_name'), ['model_name'], unique=False)
        batch_op.create_index(batch_op.f('idx_classification_results_data_type_id'), ['data_type', 'data_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_classification_results_data_type'), ['data_type'], unique=False)
        batch_op.create_index(batch_op.f('idx_classification_results_data_id'), ['data_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_classification_results_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('idx_classification_results_classified_by'), ['classified_by'], unique=False)
        batch_op.alter_column('probability_non_radikal',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=8),
               existing_nullable=False,
               existing_server_default=sa.text('0.0'))
        batch_op.alter_column('probability_radikal',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=10, scale=8),
               existing_nullable=False,
               existing_server_default=sa.text('0.0'))
        batch_op.drop_column('corrected_at')
        batch_op.drop_column('corrected_by')
        batch_op.drop_column('corrected_prediction')
        batch_op.drop_column('is_corrected')

    # ### end Alembic commands ###
